// Preamble for SXrdClasses.h, generated by the extract-sxrd-classes.pl script.
//
// To build library by hand:
//   rootcint -f SXrdClasses_Dict.cxx -c -p SXrdClasses.h SXrdClasses_LinkDef.h
//   g++ -o libSXrdClasses.so -shared -fPIC `root-config --cflags` SXrdClasses.cxx SXrdClasses_Dict.cxx
// In root:
//   gSystem->Load("libSXrdClasses")
//   // or put it in rootrc
//
// For analysis of IOV data, stored in SXrdIoInfo structs, see function
// dump_xrdfar_tree_ioinfo().

#include "Rtypes.h"
class TTree;

void dump_xrdfar_tree_ioinfo(TTree *t, Long64_t ev);

//==============================================================================
// $Id: SRange.h 2931 2014-01-23 22:25:55Z matevz $

// Copyright (C) 1999-2008, Matevz Tadel. All rights reserved.
// This file is part of GLED, released under GNU General Public License version 2.
// For the licensing terms see $GLEDSYS/LICENSE or http://www.gnu.org/.

#ifndef GledCore_SRange_H
#define GledCore_SRange_H

#include <TString.h>

class SRange
{
public:
  Double_t	mMin;   // X{GS}
  Double_t	mMax;   // X{GS}
  Double_t      mSumX;  // X{GS}
  Double_t      mSumX2; // X{GS}
  ULong64_t     mN;     // X{GS}

public:
  SRange();

  void Reset();
  void Reset(Double_t min, Double_t max, Double_t sumx, Double_t sumx2, ULong64_t n);
  void SetSumX2FromSigma(Double_t sigma);

  void AddSample(Double_t x);

  Double_t GetAverage() const;
  Double_t GetSigma() const;

  void Dump(const TString& prefix="SRange: ", const TString& postfix="\n") const;


  ClassDefNV(SRange, 1);
}; // endclass SRange

#endif


//==============================================================================
// $Id: SXrdServerInfo.h 2936 2014-01-28 22:57:02Z matevz $

// Copyright (C) 1999-2008, Matevz Tadel. All rights reserved.
// This file is part of GLED, released under GNU General Public License version 2.
// For the licensing terms see $GLEDSYS/LICENSE or http://www.gnu.org/.

#ifndef XrdMon_SXrdServerInfo_H
#define XrdMon_SXrdServerInfo_H

#include "Rtypes.h"
#include "TString.h"

#ifndef __CINT__
class XrdServer;
#endif

class SXrdServerInfo
{
public:
  TString           mHost;
  TString           mDomain;
  TString           mSite;

  SXrdServerInfo()  {}
  ~SXrdServerInfo() {}

#ifndef __CINT__

#endif

  ClassDefNV(SXrdServerInfo, 2);
}; // endclass SXrdServerInfo

#endif


//==============================================================================
// $Id: SXrdUserInfo.h 2782 2012-06-19 06:46:45Z matevz $

// Copyright (C) 1999-2008, Matevz Tadel. All rights reserved.
// This file is part of GLED, released under GNU General Public License version 2.
// For the licensing terms see $GLEDSYS/LICENSE or http://www.gnu.org/.

#ifndef XrdMon_SXrdUserInfo_H
#define XrdMon_SXrdUserInfo_H

#include "Rtypes.h"
#include "TString.h"

#ifndef __CINT__
class XrdUser;
#endif

class SXrdUserInfo
{
public:
  TString           mName;

  TString           mRealName;
  TString           mDN;
  TString           mVO;
  TString           mRole;
  TString           mGroup;
  TString           mServerUsername;
  TString           mFromHost;
  TString           mFromDomain;
  TString           mAppInfo;
  Long64_t          mLoginTime;
  Bool_t            bNumericHost;

  SXrdUserInfo()  {}
  ~SXrdUserInfo() {}

#ifndef __CINT__

#endif

  ClassDefNV(SXrdUserInfo, 1);
}; // endclass SXrdUserInfo

#endif


//==============================================================================
// $Id: SXrdFileInfo.h 2782 2012-06-19 06:46:45Z matevz $

// Copyright (C) 1999-2008, Matevz Tadel. All rights reserved.
// This file is part of GLED, released under GNU General Public License version 2.
// For the licensing terms see $GLEDSYS/LICENSE or http://www.gnu.org/.

#ifndef XrdMon_SXrdFileInfo_H
#define XrdMon_SXrdFileInfo_H

#include "Rtypes.h"
#include "TString.h"



#ifndef __CINT__
class XrdFile;
#endif

class SXrdFileInfo
{
public:
  TString         mName;

  Long64_t        mOpenTime;
  Long64_t        mCloseTime;

  SRange          mReadStats;
  SRange          mSingleReadStats;
  SRange          mVecReadStats;
  SRange          mVecReadCntStats;
  SRange          mWriteStats;

  Double_t        mRTotalMB;
  Double_t        mWTotalMB;
  Double_t        mSizeMB;

  SXrdFileInfo()  {}
  ~SXrdFileInfo() {}

#ifndef __CINT__

#endif

  ClassDefNV(SXrdFileInfo, 1);
}; // endclass SXrdFileInfo

#endif


//==============================================================================
// $Id: SXrdIoInfo.h 2875 2012-11-14 07:35:06Z matevz $

// Copyright (C) 1999-2008, Matevz Tadel. All rights reserved.
// This file is part of GLED, released under GNU General Public License version 2.
// For the licensing terms see $GLEDSYS/LICENSE or http://www.gnu.org/.

#ifndef XrdMon_SXrdIoInfo_H
#define XrdMon_SXrdIoInfo_H

#include "Rtypes.h"
#include "TString.h"

#include <vector>

//==============================================================================

class SXrdReq
{
public:
  enum Req_e { R_Write, R_Read, R_VecRead };

private:
  Long64_t mOffset;   // Overloaded for R_VecRead
  Int_t    mLength;
  Int_t    mTime;

  void set_req_count(UShort_t rc)  { assign_offset(0xffff, 32, rc); }
  void set_reqs_lost(UShort_t rm)  { assign_offset(0x7fff, 48, rm); }

  void assign_offset(Long64_t mask, Int_t shift, Long64_t value)
  {
    value <<= shift;
    mask  <<= shift;
    mOffset &= ~mask;
    mOffset |=  value;
  }

public:
  SXrdReq() : mOffset(0), mLength(0), mTime(0) {}

  SXrdReq(Long64_t off, Int_t len, Int_t time) :
    mOffset(off), mLength(len), mTime(time) {}

  SXrdReq(Int_t index, UShort_t n_seg, Int_t len, Int_t time) :
    mOffset((1ll << 63) | (0xffffffffll & index) | (Long64_t(n_seg) << 32)),
    mLength(len), mTime(time) {}

  void IncLength(Int_t len)         { mLength += len; }
  void IncSubReqCount(UShort_t cnt) { set_req_count(SubReqCount() + cnt); }
  void IncSubReqsLost(UShort_t cnt) { set_reqs_lost(SubReqsLost() + cnt); }

  // Access functions

  Req_e Type() const
  {
    if (mOffset < 0) return R_VecRead;
    if (mLength < 0) return R_Write; else return R_Read;
  }
  Int_t  Length() const { return mLength < 0 ? -mLength : mLength; }
  Int_t  Time()   const { return mTime; }

  // For Read and Write
  Long64_t Offset() const { return mOffset < 0 ? -1 : mOffset; }

  // For VecRead
  Int_t    SubReqIndex() const   { return mOffset & 0xffffffff; }
  UShort_t SubReqCount() const   { return (mOffset >> 32) & 0xffff; }
  UShort_t SubReqsLost() const   { return (mOffset >> 48) & 0x7fff; }
  UShort_t SubReqsStored() const { return SubReqIndex() >= 0 ? SubReqCount() - SubReqsLost() : 0; }

  const char* TypeName() const
  {
    if (mOffset < 0) return "VecRead";
    if (mLength < 0) return "Write"; else return "Read";
  }

  ClassDefNV(SXrdReq, 1);
}; // endclass SXrdReq

typedef std::vector<SXrdReq> vSXrdReq_t;
typedef vSXrdReq_t::iterator vSXrdReq_i;


//==============================================================================

class SXrdIoInfo
{
public:
  vSXrdReq_t            mReqs;
  Int_t                 mNErrors;

  // Details for unpacked vector reads.
  std::vector<Long64_t> mOffsetVec;
  std::vector<Int_t>    mLengthVec;

  // ----------------------------------------------------------------

  SXrdIoInfo() : mNErrors(0) {}
  ~SXrdIoInfo() {}

  void Dump(Int_t level=1);

  ClassDefNV(SXrdIoInfo, 1);
}; // endclass SXrdIoInfo

#endif
